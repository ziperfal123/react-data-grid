{"version":3,"file":"GroupRow.js","sourceRoot":"","sources":["../src/GroupRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAC9C,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,SAAS,UAAU,CAAQ,EACzB,EAAE,EACF,QAAQ,EACR,eAAe,EACf,SAAS,EACT,MAAM,EACN,GAAG,EACH,KAAK,EACL,UAAU,EACV,eAAe,EACf,aAAa,EACb,QAAQ,EACR,GAAG,KAAK,EACqB;IAC7B,oCAAoC;IACpC,MAAM,GAAG,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,iBAAiB,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAE7E,SAAS,WAAW;QAClB,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,CACL,2CACE,IAAI,EAAC,KAAK,gBACE,KAAK,mBACF,UAAU,EACzB,SAAS,EAAE,IAAI,CACb,SAAS,EACT,eAAe,EACf,WAAW,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YAC9C,kBAAkB,EAAE,aAAa;YACjC,wBAAwB,EAAE,eAAe,KAAK,CAAC,CAAC,CAAC,0CAA0C;SAC5F,CAAC,EACJ,OAAO,EAAE,WAAW,EACpB,KAAK,EAAE,EAAE,GAAG,EAAE,IACV,KAAK,GAER,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAC7B,oBAAC,SAAS,IACR,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,EAAE,EAAE,EAAE,EACN,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,aAAa,EAC5B,cAAc,EAAE,eAAe,KAAK,MAAM,CAAC,GAAG,EAC9C,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,MAAM,EACd,gBAAgB,EAAE,GAAG,GACrB,CACH,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,UAAU,CAAgE,CAAC","sourcesContent":["import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { GroupRowRendererProps } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  eventBus,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    eventBus.dispatch('SelectCell', { rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          eventBus={eventBus}\n          column={column}\n          groupColumnIndex={idx}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n"]}
{"version":3,"file":"HeaderRow.js","sourceRoot":"","sources":["../src/HeaderRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAEjD,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,sBAAsB,EAAE,MAAM,SAAS,CAAC;AAkBjD,SAAS,SAAS,CAAQ,EACxB,OAAO,EACP,IAAI,EACJ,YAAY,EACZ,oBAAoB,EACpB,eAAe,EACf,cAAc,EACd,UAAU,EACV,aAAa,EACb,MAAM,EACgB;IACtB,MAAM,4BAA4B,GAAG,WAAW,CAAC,CAAC,OAAgB,EAAE,EAAE;QACpE,IAAI,CAAC,oBAAoB;YAAE,OAAO;QAElC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAErC,MAAM,eAAe,GAAG,IAAI,GAAG,EAAa,CAAC;QAC7C,IAAI,OAAO,EAAE;YACX,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACtB,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;aACxC;SACF;QAED,oBAAoB,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;IAE/C,OAAO,CACL,6BACE,IAAI,EAAC,KAAK,mBACK,CAAC,EAChB,SAAS,EAAC,gBAAgB,IAEzB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;QACpB,OAAO,CACL,oBAAC,UAAU,IACT,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,cAAc,EACxB,eAAe,EAAE,eAAe,EAChC,wBAAwB,EAAE,4BAA4B,EACtD,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,aAAa,GAC5B,CACH,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,SAAS,CAAyD,CAAC","sourcesContent":["import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n"]}
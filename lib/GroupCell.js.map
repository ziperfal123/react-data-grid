{"version":3,"file":"GroupCell.js","sourceRoot":"","sources":["../src/GroupCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,IAAI,MAAM,MAAM,CAAC;AAmBxB,SAAS,SAAS,CAAQ,EACxB,EAAE,EACF,MAAM,EACN,QAAQ,EACR,SAAS,EACT,UAAU,EACV,cAAc,EACd,aAAa,EACb,QAAQ,EACR,MAAM,EACN,gBAAgB,EACM;IACtB,SAAS,WAAW;QAClB,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,SAAS,oBAAoB,CAAC,OAAgB;QAC5C,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED,0DAA0D;IAC1D,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,IAAI,gBAAgB,KAAK,MAAM,CAAC,GAAG,CAAC;IAE3E,OAAO,CACL,6BACE,IAAI,EAAC,UAAU,mBACA,MAAM,CAAC,GAAG,GAAG,CAAC,EAC7B,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,iBAAiB,EAAE,MAAM,CAAC,MAAM;YAChC,sBAAsB,EAAE,MAAM,CAAC,kBAAkB;YACjD,mBAAmB,EAAE,cAAc;SACpC,CAAC,EACF,KAAK,EAAE;YACL,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;SAChD,EACD,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,IAEjD,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,gBAAgB,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,CACjF,oBAAC,MAAM,CAAC,cAAc,IACpB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,EACtB,cAAc,EAAE,cAAc,EAC9B,aAAa,EAAE,aAAa,EAC5B,oBAAoB,EAAE,oBAAoB,EAC1C,WAAW,EAAE,WAAW,GACxB,CACH,CACG,CACP,CAAC;AACJ,CAAC;AAED,eAAe,IAAI,CAAC,SAAS,CAAyD,CAAC","sourcesContent":["import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { GroupRowRendererProps, CalculatedColumn } from './types';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'eventBus'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  eventBus,\n  column,\n  groupColumnIndex\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    eventBus.dispatch('ToggleGroup', id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    eventBus.dispatch('SelectRow', { rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        width: column.width,\n        left: column.left,\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n"]}
{"version":3,"file":"Row.js","sourceRoot":"","sources":["../src/Row.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport { RowRendererProps, SelectedCellProps } from './types';\nimport { wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter() {\n    setDraggedOverRowIdx?.(rowIdx);\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={wrapEvent(handleDragEnter, onMouseEnter)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            isDraggedOver={draggedOverCellIdx === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            eventBus={eventBus}\n            dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n"]}